{"version":3,"sources":["components/Navbar/index.js","components/Cards/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","topScore","score","Cards","src","image","alt","id","key","onClick","handleClick","Footer","href","target","rel","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","state","funkoPops","clickedPops","message","event","clickedPopsCopy","_this","targetID","includes","setState","setTimeout","this","bind","Object","assertThisInitialized","resetGame","push","handleShuffle","shuffledCards","_this2","components_Navbar","map","item","components_Cards","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cb28ef4.chunk.js","sourcesContent":["//sets up the reusable Navbar component\r\nimport React from \"react\";\r\n\r\nconst Navbar = (props) => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark text-white text-center sticky-top d-flex justify-content-around\">\r\n        <div>\r\n            <h1>Clicky Game</h1>\r\n            <p className=\"px-2 small font-weight-bold font-italic\">Test your memory â€“ don't click twice!</p>\r\n        </div>\r\n        <div>\r\n            <h5>Top Score: {props.topScore}</h5>\r\n            <h3>Score: {props.score}</h3>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default Navbar;","//sets up the reusable Cards component\r\nimport React from \"react\";\r\nimport './style.css'\r\n\r\nconst Cards = (props) => (\r\n    <img \r\n        className=\"thumbnail\" \r\n        src={props.image}\r\n        alt={props.id}\r\n        key={props.id}\r\n        id={props.id}\r\n        onClick={props.handleClick}\r\n    />\r\n);\r\n    \r\n\r\n\r\nexport default Cards;","//sets up the reusable Footer component\r\nimport React from \"react\";\r\nimport './style.css'\r\n\r\nconst Footer = () => (\r\n    <footer className=\"pt-3 text-white bg-dark\">\r\n        <div className=\"d-flex flex-column justify-content-center align-items-center\">\r\n            <h5><a href=\"https://dolaku.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Donna Kuang</a></h5>\r\n            <a className=\"link-email\" href=\"mailto:dolaku@gmail.com\">dolaku@gmail.com</a>\r\n            <a className=\"display-4 link-email\" href=\"https://github.com/dolaku\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-github\"></i></a>\r\n            <p className=\"small\">&copy; Copyright 2019. All Rights Reserved.</p>\r\n        </div>\r\n    </footer>\r\n);\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Cards from './components/Cards';\r\nimport Footer from './components/Footer';\r\nimport funkoPops from './funkoPops.json';\r\n\r\n\r\nconst shuffle = (array) => {\r\n\r\n  let currentIndex = array.length;\r\n  let temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    funkoPops,\r\n    clickedPops: [],\r\n    score: 0,\r\n    topScore: 0,\r\n    message: ''\r\n  };\r\n\r\n  // check if this has been clicked before\r\n  // is it in the clickedPops array?\r\n  handleClick = (event) => {\r\n    const clickedPopsCopy = this.state.clickedPops;\r\n    let targetID = event.target.id;\r\n    \r\n    if (!clickedPopsCopy.includes(targetID)) {\r\n      // if not clicked yet, add this ID to the array\r\n      clickedPopsCopy.push(targetID);\r\n\r\n      // increment score && check against topScore\r\n      this.setState({ score: this.state.score + 1 });\r\n\r\n      if (this.state.score >= this.state.topScore) {\r\n        this.setState({ topScore: this.state.score + 1 });\r\n      }\r\n\r\n\r\n    } else {\r\n      // display losing text for 2.5 seconds\r\n      this.setState({ message: <h3 className=\"text-white incorrect\">You Lose! Play again!</h3>});\r\n\r\n      setTimeout(function() {\r\n        this.setState({ message: '' });\r\n      }\r\n      .bind(this), 2500);\r\n\r\n      this.resetGame();\r\n    };\r\n    \r\n    // check win\r\n    if (clickedPopsCopy.length >= 12) {\r\n      // display winning text for 2.5 seconds\r\n      this.setState({ message: <h3 className=\"text-white correct\">You win! Play again!</h3>});\r\n\r\n      setTimeout(function() {\r\n        this.setState({ message: '' });\r\n      }\r\n      .bind(this), 2500);\r\n\r\n      this.resetGame();\r\n    }\r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n    // shuffle cards after each click\r\n    this.handleShuffle();\r\n  }\r\n\r\n  \r\n  handleShuffle = () => {\r\n    let shuffledCards = shuffle(funkoPops);\r\n    this.setState( {funkoPops: shuffledCards} );\r\n  }\r\n\r\n  resetGame = () => {\r\n    // reset score and clicked array\r\n    this.setState({ clickedPops: [] });\r\n    this.setState({ score: 0 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Navbar\r\n          // pass info to NavBar component\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n        />\r\n\r\n        <div className=\"App p-2\">\r\n          {this.state.message}\r\n          <div className=\"App-body mx-auto p-sm-2 p-md-4\">\r\n\r\n            {/* cycle through array & create Cards component */}\r\n            {this.state.funkoPops.map(item => (\r\n              <Cards\r\n                // pass info to Cards component\r\n                key={item.id}\r\n                id={item.id}\r\n                image={item.image}\r\n                handleClick={this.handleClick}\r\n              />\r\n            ))}\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}